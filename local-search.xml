<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python|selenium实现自动点赞收藏(进阶版)</title>
    <link href="/2022/08/26/Python%20selenium/"/>
    <url>/2022/08/26/Python%20selenium/</url>
    
    <content type="html"><![CDATA[<p>在上一篇文章《<a href="https://hncd1024.github.io/2022/08/14/Python%20PyAutoGUI/">Python|PyAutoGUI实现自动点赞收藏</a>》中写过利用 PyAutoGUI 实现网页自动化点赞+收藏的功能，实测发现依靠屏幕坐标系完成鼠标操作的弊端（因为布局原因导致图标位置变化时，不能很好的处理），IT人当然不能接受这种瑕疵😂😂😂<br />今天用另一个 python 库实现全天候、全地域的精准点击😁😁😁</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>和上一篇文章一样，也是基于网页实现循环打开未读文章，之后进行点赞+收藏操作。不同的是今天使用的 selenium 库在元素定位时是基于网页html的格式，可以通过元素 id 、 name 、 class 、 css 甚至 xpath 实现精准定位。在网页的处理上比 PyAutoGUI 有更高的稳定性。</p><h2 id="测试效果"><a class="markdownIt-Anchor" href="#测试效果"></a> 测试效果</h2><p><img src="https://s2.loli.net/2022/08/26/v8QpfH51kbxazW7.png" alt="测试效果" /></p><h3 id="源码如下"><a class="markdownIt-Anchor" href="#源码如下"></a> 源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br>driver = webdriver.Edge(<span class="hljs-string">&#x27;C:\Program Files (x86)\Microsoft\Edge\Application\msedgedriver.exe&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-comment">#打开网页版APP，完成登录</span><br>    driver.get(<span class="hljs-string">&#x27;https://xxxxxx/&#x27;</span>)<br>    driver.maximize_window() <span class="hljs-comment">#窗口最大化</span><br>    time.sleep(<span class="hljs-number">15</span>) <span class="hljs-comment">#登录系统</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------登录成功----------&#x27;</span>)<br>    <span class="hljs-keyword">if</span> driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//img[@alt=&quot;资讯&quot;]&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------打开资讯----------&#x27;</span>)<br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//img[@alt=&quot;资讯&quot;]&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------打开推荐----------&#x27;</span>)<br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div[text()=&quot;推荐&quot;]&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auto_click</span>(<span class="hljs-params">num</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i&lt;num:<br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//span[text()=&quot;热度优先&quot;]&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//span[text()=&quot;时间优先&quot;]&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        <span class="hljs-comment"># 打开第一篇文章</span><br>        driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div [@class=&quot;home-main-partyNews&quot; and  @style=&quot;margin-top: 0px;&quot;]//div [@class=&quot;dynamic-left-title&quot;]&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 切换标签</span><br>        window = driver.current_window_handle <span class="hljs-comment">#获取当前句柄</span><br>        all_handles = driver.window_handles<br>        driver.switch_to.window(all_handles[-<span class="hljs-number">1</span>])<br>        <span class="hljs-comment"># 收藏</span><br>        <span class="hljs-keyword">try</span> :<br>            driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div[@class=&quot;icon&quot;]/span[@class=&quot;pointer&quot;]/i[@class=&quot;iconfont icon-shoucanghuise&quot;]&#x27;</span>).click()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第&#123;&#125;篇文章收藏成功&#x27;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">except</span> :<br>            driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div[@style=&quot;display: block;&quot;]/span[@class=&quot;header-icon&quot;]/i[@class=&quot;iconfont icon-weishoucang&quot;]&#x27;</span>).click()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第&#123;&#125;篇文章收藏成功&#x27;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        <span class="hljs-comment"># 点赞</span><br>        <span class="hljs-keyword">try</span> :<br>            driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div[@class=&quot;icon&quot;]/span[@class=&quot;pointer&quot;]/i[@class=&quot;iconfont icon-dianzanhuise&quot;]&#x27;</span>).click()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第&#123;&#125;篇文章点赞成功&#x27;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">except</span> :<br>            driver.find_element(By.XPATH,<span class="hljs-string">&#x27;//div[@style=&quot;display: block;&quot;]/span[@class=&quot;header-icon&quot;]/i[@class=&quot;iconfont icon-dianzanhuise&quot;]&#x27;</span>).click()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第&#123;&#125;篇文章点赞成功&#x27;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># 关闭当前标签，切回首页标签</span><br>        driver.close()<br>        driver.switch_to.window(window)<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        i +=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------执行完毕----------&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    login()<br>    auto_click(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>selenium 同样是一款 Web 自动化测试工具，但基本都被用来爬虫了。果真 python 的一切自动化测试工具的归宿都是爬虫😂😂😂<br />selenium 还是很强大的，在 web 页面解析、浏览器控制、鼠键处理上都是很灵活的，可以处理一些相对复杂的场景。并且selenium 支持 IE 、 chrome 、 edge 等常用浏览器，使用时需要借助 webdriver 插件完成。（ webdriver 插件最好和本地计算机对应浏览器的版本保持一致）</p><div class="note note-warning">            <p>需要提示的是，selenium的4.*版本语法做了更新，和3.*差异较大，使用时需留意官方文档。</p>          </div><p><img src="https://s2.loli.net/2022/08/26/eh2XlkuZPBOr1YK.png" alt="pip show selenium" /></p><h2 id="附selenium库基本用法整理"><a class="markdownIt-Anchor" href="#附selenium库基本用法整理"></a> 附：selenium库基本用法整理</h2><p><font color="#dd0000">后续想起来了再整理吧😂😂😂</font></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>GUI自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel|关于Excel的一些奇怪探索</title>
    <link href="/2022/08/24/Excel_%E8%BD%AC%E5%8E%8B%E7%BC%A9%E5%8C%85/"/>
    <url>/2022/08/24/Excel_%E8%BD%AC%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>2020年参加网络攻防大赛的时候刷过一段时间CTF的题目，在CTF夺旗赛的题目选择上，我比较喜欢杂项，因为杂项的解题思路天马行空（各种骚操作层出不穷，流连忘返~ ）。记得jpg、gif、exe等文件作为题目的时候，有种解题思路是将文件后缀改成.txt或者.zip就能找到隐藏的flag。<br />前段时间有同事问我说excel里有大量的照片，需要保存到本地文件夹中，问有没有快捷的方法。我第一反应就是尝试改后缀名为.zip，后来发现果然可以。于是就有了这篇博文~<br />后来在网上找到了一篇文章，提供了更多的使用技巧。果真宇宙的尽头是0和1~<br />参考文献：<a href="https://zhuanlan.zhihu.com/p/30952873?utm_id=0">不为人知的Excel转压缩包逆天功能</a></p><h1 id="测试过程"><a class="markdownIt-Anchor" href="#测试过程"></a> 测试过程</h1><h2 id="目标excel"><a class="markdownIt-Anchor" href="#目标excel"></a> 目标excel</h2><p>在准备好的excel中，插入了图片、插入了批注、sheet2工作表设置了保护密码、sheet3工作表被隐藏。<br /><img src="https://s2.loli.net/2022/08/24/1OiehHKRyrUdslw.png" alt="sheet1插入了照片及批注" /><br /><img src="https://s2.loli.net/2022/08/24/qWaySHwI5GYX6tT.png" alt="sheet2被保护" /><br /><img src="https://s2.loli.net/2022/08/24/paJHt9y5DENjRuC.png" alt="sheet3被隐藏" /><br />复制excel，将后缀.xlsx改为.zip（或rar等压缩格式）后解压。可以看到有_rels，docProps、xl三个文件夹及一个[content_Types].xml文件。后续操作均在xl文件夹下进行~<br /><img src="https://s2.loli.net/2022/08/24/5HMtIDsm2fLu6kl.png" alt="修改后缀名并解压" /><br /><img src="https://s2.loli.net/2022/08/24/Zg4vR3yxWHcQN2X.png" alt="解压后文件组成" /><br /><img src="https://s2.loli.net/2022/08/24/GTJqFux6iAwYXaU.png" alt="xl目录组成" /></p><h2 id="批量修改sheet表名称"><a class="markdownIt-Anchor" href="#批量修改sheet表名称"></a> 批量修改sheet表名称</h2><p>在xl文件夹下找到workbook.xml，文本编辑器打开。可以看到name属性即为sheet表名称，修改name的值后保存。<br /><img src="https://s2.loli.net/2022/08/24/zJ8MZpmNcbeHSvT.png" alt="修改sheet表名称" /><br />修改后将解压的文件重新压缩为.zip文件，后修改后缀名为.xlsx。之后excel打开发现sheet表修改成功~<br /><img src="https://s2.loli.net/2022/08/24/IMYaVGw1PUNz9Jx.png" alt="修改sheet表名称验证" /></p><h2 id="取消隐藏sheet表"><a class="markdownIt-Anchor" href="#取消隐藏sheet表"></a> 取消隐藏sheet表</h2><p>在xl文件夹下找到workbook.xml，文本编辑器打开。可以看到state=&quot;hidden&quot;属性，对应的sheet表即为隐藏的sheet表。删除state=&quot;hidden&quot;后保存。<br /><img src="https://s2.loli.net/2022/08/24/9wnN6fJRAogqTeU.png" alt="取消隐藏sheet表" /><br />修改后将解压的文件重新压缩为.zip文件，后修改后缀名为.xlsx。之后excel打开发现隐藏的sheet表已取消隐藏~<br /><img src="https://s2.loli.net/2022/08/24/IastC3brgl8V7O5.png" alt="取消隐藏sheet表验证" /></p><h2 id="批量提取照片"><a class="markdownIt-Anchor" href="#批量提取照片"></a> 批量提取照片</h2><p>在xl文件夹下找到media文件夹，原excel中的照片已自动打包下载~<br /><img src="https://s2.loli.net/2022/08/24/UKJjRk3bGFwCETv.png" alt="批量提取照片" /></p><h2 id="解密受保护的sheet表"><a class="markdownIt-Anchor" href="#解密受保护的sheet表"></a> 解密受保护的sheet表</h2><p>在xl/worksheets文件夹下找到隐藏的sheet表（如sheet2.xml)，文本编辑器打开。可以看到&lt;sheetProtection&gt;&lt;/sheetProtection&gt;属性。删除sheetProtection标签后保存。</p><p><img src="https://s2.loli.net/2022/08/24/DCkUNK279ASLOpB.png" alt="解密受保护的sheet表" /><br />修改后将解压的文件重新压缩为.zip文件，后修改后缀名为.xlsx。之后excel打开发现受保护的sheet表已取消保护~<br /><img src="https://s2.loli.net/2022/08/24/ChLIY347cRNzjyr.png" alt="解密受保护的sheet表后验证" /></p><h2 id="批量修改批注"><a class="markdownIt-Anchor" href="#批量修改批注"></a> 批量修改批注</h2><p>在xl文件夹下找到comments1.xml，文本编辑器打开。可以看到&lt;t&gt;标签即为批注内容，修改批注内容后保存。<br /><img src="https://s2.loli.net/2022/08/24/16VWQ4iI2KSqZr9.png" alt="批量修改批注" /><br />修改后将解压的文件重新压缩为.zip文件，后修改后缀名为.xlsx。之后excel打开发现批注修改成功~<br /><img src="https://s2.loli.net/2022/08/24/y6JTDw5PURbx9nZ.png" alt="批量修改批注后验证" /></p>]]></content>
    
    
    <categories>
      
      <category>Excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VBA</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown|基本用法</title>
    <link href="/2022/08/19/markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2022/08/19/markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="关于markdown"><a class="markdownIt-Anchor" href="#关于markdown"></a> 关于markdown</h1><p>最近接触过的很多编辑器/网站感觉都很清爽，后来知道原来是支持了markdown。关于markdown我在前几年就有听说过，但当时觉得自己用不到，以为只是html的简化版，没想到有一天也会大型真香现场~ 😂😂😂<br />这个博客系统的博客就是通过markdown编写的，日常记笔记也慢慢习惯使用markdown了，好的工具当然事半功倍。<br />在编辑器的选择上，我用过有道笔记、Typora、vscode，个人最终还是倾向使用vscode。（vscode的插件太强大了，一款编辑器搞定日常涉及到的所有计算机语言，牛批爆了~ ）<br /><a href="https://baike.baidu.com/item/markdown/3245829?fr=kg_general">百度百科</a>如下：</p><blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br />由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 如 GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。<br />优势：</p><ul><li>世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho等。</li><li>用于编写说明文档，以“<a href="http://README.md">README.md</a>”的文件名保存在软件的目录下面。</li><li>Markdown可以快速转化为演讲PPT、Word产品文档甚至是用非常少量的代码完成最小可用原型。</li></ul></blockquote><h1 id="markdown语法"><a class="markdownIt-Anchor" href="#markdown语法"></a> markdown语法</h1><p>基于<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程|菜鸟教程</a>整理。</p><h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h2><p>使用“# ”标记1-6级标题，标题书写格式为“#”+“空格”：</p><blockquote><p># 一级标题<br />## 二级标题<br />### 三级标题<br />#### 四级标题<br />##### 五级标题<br />###### 六级标题</p></blockquote><h2 id="段落样式"><a class="markdownIt-Anchor" href="#段落样式"></a> 段落样式</h2><h3 id="换行"><a class="markdownIt-Anchor" href="#换行"></a> 换行</h3><ul><li>方式一：段落的换行是使用两个以上空格加上回车；</li><li>方式二：段落后增加:&lt;br&gt;段落符</li></ul><hr /><h3 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h3><blockquote><p>*斜体文本*<br />_斜体文本_<br />*<em>粗体文本</em>*<br />_<em>粗体文本</em>_<br />*<strong>粗斜体文本</strong>*<br />_<strong>粗斜体文本</strong>_</p></blockquote><hr /><h3 id="分割线"><a class="markdownIt-Anchor" href="#分割线"></a> 分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。</p><blockquote><p>***<br />—<br />___</p></blockquote><hr /><h3 id="删除线"><a class="markdownIt-Anchor" href="#删除线"></a> 删除线</h3><p>只需要在文字的两端加上两个波浪线 ~~ 即可</p><blockquote><p>示例：~<sub>要删除的内容~</sub><br />效果：<s>要删除的内容</s></p></blockquote><h3 id="下划线"><a class="markdownIt-Anchor" href="#下划线"></a> 下划线</h3><p>下划线可以通过 HTML 的 &lt;u&gt; 标签来实现</p><blockquote><p>示例：&lt;u&gt;带下划线的文本&lt;/u&gt;<br />效果：<u>带下划线的文本</u></p></blockquote><h3 id="脚注"><a class="markdownIt-Anchor" href="#脚注"></a> 脚注</h3><blockquote><p>创建脚注格式类似这样：社会主义核心价值观 [^1]。<br />[^1]: 富强、民主、文明、和谐，自由、平等、公正、法制，爱国、敬业、诚信、友善</p></blockquote><p>效果：社会主义核心价值观<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="富强民主文明和谐，自由平等公正法制，爱国敬业诚信友善">[1]</span></a></sup></p><h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2><p>Markdown 支持有序列表和无序列表。<br />无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><blockquote><p>* 第一项<br />+ 第二项<br />- 第三项</p></blockquote><ul><li>第一项</li></ul><ul><li>第二项</li></ul><ul><li>第三项</li></ul><hr /><p>有序列表使用数字并加上 . 号来表示，如：</p><ol><li>序号1</li><li>序号2</li></ol><hr /><p><strong>列表嵌套</strong><br />列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="区块-代码"><a class="markdownIt-Anchor" href="#区块-代码"></a> 区块、代码</h2><p><strong>区块</strong>：Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号。<br />另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推。</p><hr /><p><strong>代码</strong>：用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="链接-图片"><a class="markdownIt-Anchor" href="#链接-图片"></a> 链接、图片</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br></code></pre></td></tr></table></figure><h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p><strong>对齐方式</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br><span class="hljs-meta">:-:</span> 设置内容和标题栏居中对齐。<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="html元素"><a class="markdownIt-Anchor" href="#html元素"></a> HTML元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br />目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用 &lt;<span class="hljs-selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;Alt&lt;/<span class="hljs-selector-tag">kbd</span>&gt;+&lt;<span class="hljs-selector-tag">kbd</span>&gt;<span class="hljs-selector-tag">Del</span>&lt;/<span class="hljs-selector-tag">kbd</span>&gt; 重启电脑<br></code></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><hr /><h3 id="tag便签"><a class="markdownIt-Anchor" href="#tag便签"></a> Tag便签</h3><p>在 markdown 中加入如下的代码来使用便签。标签属性包括：primary、secondary、success、danger、warning、info、light<br />格式如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><span class="language-xml"></span><br><span class="language-xml">测试便签success</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>测试便签 success</p>          </div><div class="note note-primary">            <p>测试便签 primary</p>          </div><div class="note note-secondary">            <p>测试便签 secondary</p>          </div><div class="note note-danger">            <p>测试便签 danger</p>          </div><div class="note note-warning">            <p>测试便签 warning</p>          </div><div class="note note-info">            <p>测试便签 info</p>          </div><div class="note note-light">            <p>测试便签 light</p>          </div><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p>Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。</p><p>KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。</p><p>默认下的分隔符：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span> 或者 \(...\) 中的数学表达式将会在行内显示。<br><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>...<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span> 或者 \[...\] 或者 ```math 中的数学表达式将会在块内显示。<br></code></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">f(x)=sin(x)+12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\begin{Bmatrix}   a &amp; b \\   c &amp; d\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">}</span></span></span></span></span></span></span></p>\begin{CD}   A @>a>> B \\@VbVV @AAcA \\   C @= D\end{CD}<hr /><h3 id="流程图"><a class="markdownIt-Anchor" href="#流程图"></a> 流程图</h3><p>1、横向流程图源码格式：</p><pre><code class=" \mermaid">graph LRA[方形] --&gt;B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt;|a=1| D[结果1]    C --&gt;|a=2| E[结果2]    F[横向流程图]</code></pre><p>2、竖向流程图源码格式：</p><pre><code class=" \mermaid">graph TDA[方形] --&gt; B(圆角)    B --&gt; C&#123;条件a&#125;    C --&gt; |a=1| D[结果1]    C --&gt; |a=2| E[结果2]    F[竖向流程图]</code></pre><p>3、标准流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs \flow">st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;io-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></table></figure><p>4、标准流程图源码格式（横向）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs \flow">st=&gt;start: 开始框<br>op=&gt;operation: 处理框<br>cond=&gt;condition: 判断框(是或否?)<br>sub1=&gt;subroutine: 子流程<br>io=&gt;inputoutput: 输入输出框<br>e=&gt;end: 结束框<br>st(right)-&gt;op(right)-&gt;cond<br>cond(yes)-&gt;io(bottom)-&gt;e<br>cond(no)-&gt;sub1(right)-&gt;op<br></code></pre></td></tr></table></figure><p>5、UML时序图源码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs \sequence">对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象A-&gt;对象B: 你真的好吗？<br></code></pre></td></tr></table></figure><p>6、UML时序图源码复杂样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs \sequence">Title: 标题：复杂使用<br>对象A-&gt;对象B: 对象B你好吗?（请求）<br>Note right of 对象B: 对象B的描述<br>Note left of 对象A: 对象A的描述(提示)<br>对象B--&gt;对象A: 我很好(响应)<br>对象B-&gt;小三: 你好吗<br>小三--&gt;&gt;对象A: 对象B找我了<br>对象A-&gt;对象B: 你真的好吗？<br>Note over 小三,对象B: 我们是朋友<br>participant C<br>Note right of C: 没人陪我玩<br></code></pre></td></tr></table></figure><p>7、UML标准时序图样例：</p><pre><code class=" \mermaid">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!</code></pre><p>8、甘特图样例：</p><pre><code class=" \mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</code></pre><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>富强民主文明和谐，自由平等公正法制，爱国敬业诚信友善<p><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python|OS、shutil、zipfile实现批量扫描、复制、压缩文件</title>
    <link href="/2022/08/15/Python%20os%20%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/2022/08/15/Python%20os%20%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>每天一划水，无事小神仙。<br/><br />今天有个需求：服务器上有个文件夹，里面按日期生成了文件夹。工作日所在的文件夹内有需要我复制下来的文件。要求每个月取一次。<br/><br />每月要翻三十个文件夹，找二十多个文件，让我手工复制是绝不可能的！🙂🙂🙂那必须要搞个脚本自己跑。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>1、服务器磁盘已映射（本地可直接访问）。<br/><br />2、确定要批量扫描的文件夹名称（按日期命名的文件夹）。<br/><br />3、根据要扫描的日期，按文件夹名进行遍历，找到要复制的文件。<br/><br />4、在桌面创建一个文件夹，把找到的文件复制进去。<br/><br />5、将复制出来的文件夹进行压缩。<br/></p><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><h3 id="效果截图"><a class="markdownIt-Anchor" href="#效果截图"></a> 效果截图</h3><p>要扫描的文件夹，不敢想象让我手工去复制要搞到什么时候~<br /><img src="https://s2.loli.net/2022/08/15/LB2IrOTtkRqbmMN.png" alt="目标文件夹" /><br />代码批量执行还是很快的，输入要执行的区间即可。<br /><img src="https://s2.loli.net/2022/08/15/Uwz6fT5xXNYyAtH.png" alt="执行日志" /><br />执行结果完全符合预期😁😁😁<br /><img src="https://s2.loli.net/2022/08/15/3AG1UhmXs96qiod.png" alt="执行结果" /><br />然后再自动生成压缩文件~</p><h3 id="源码如下"><a class="markdownIt-Anchor" href="#源码如下"></a> 源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> sys <br><span class="hljs-comment"># from datetime import datetime</span><br><br><span class="hljs-comment"># 桌面创建文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md</span>(<span class="hljs-params">tp=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;C:\\Users\\admin\\Desktop\\&#x27;</span>+tp):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        os.makedirs(<span class="hljs-string">r&#x27;C:\\Users\\admin\\Desktop\\&#x27;</span>+tp)<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-comment"># 读取文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rd</span>(<span class="hljs-params">begindate,enddate</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(begindate),<span class="hljs-built_in">int</span>(enddate)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)):<br>            <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;\\PAR_YIELDCURVE_ALL&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;.dbf&#x27;</span>):<br>                shutil.copy(<span class="hljs-string">&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;\\PAR_YIELDCURVE_ALL&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;.dbf&#x27;</span>,<span class="hljs-string">&#x27;C:\\Users\\admin\\Desktop\\收益率曲线&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;日的收益率曲线已完成复制&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无&#123;&#125;日的收益率曲线&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无&#123;&#125;日的聚源数据文件夹&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br><br><span class="hljs-comment"># 生成压缩包</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">zip_dir</span>(<span class="hljs-params">dirname,zipfilename</span>):<br>    filelist = []<br>    <span class="hljs-keyword">if</span> os.path.isfile(dirname):<br>        filelist.append(dirname)<br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(dirname):<br>            <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br>                filelist.append(os.path.join(root, name))<br>          <br>    zf = zipfile.ZipFile(zipfilename, <span class="hljs-string">&quot;w&quot;</span>, zipfile.zlib.DEFLATED)<br>    <span class="hljs-keyword">for</span> tar <span class="hljs-keyword">in</span> filelist:<br>        arcname = tar[<span class="hljs-built_in">len</span>(dirname):]<br>        <span class="hljs-comment">#print arcname</span><br>        zf.write(tar,arcname)<br>    zf.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 输入起止日期</span><br>    <span class="hljs-comment"># enddate = datetime.today().date().strftime(r&#x27;%Y%m%d&#x27;)</span><br>    <span class="hljs-comment"># begindate = datetime.today().date().replace(day=1).strftime(r&#x27;%Y%m%d&#x27;)</span><br>    begindate = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入开始日期（格式：20220801）:&#x27;</span>)<br>    enddate =  <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入结束日期（格式：20220831）:&#x27;</span>)<br>    <span class="hljs-comment"># 检查文件夹</span><br>    md(<span class="hljs-string">&quot;收益率曲线&quot;</span>)<br>    <span class="hljs-comment"># 遍历文件夹</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;#####开始复制&#123;&#125;-&#123;&#125;的收益率曲线#####&#x27;</span>.<span class="hljs-built_in">format</span>(begindate,enddate))<br>    rd(begindate,enddate)<br>    <span class="hljs-comment"># 创建压缩包</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#####开始创建压缩包#####&quot;</span>)<br>    dirname=<span class="hljs-string">&#x27;C:\\Users\\admin\\Desktop\\收益率曲线&#x27;</span><br>    zipfilename=<span class="hljs-string">&#x27;C:\\Users\\admin\\Desktop\\收益率曲线&#123;&#125;-&#123;&#125;.zip&#x27;</span>.<span class="hljs-built_in">format</span>(begindate,enddate)<br>    zip_dir(dirname, zipfilename)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#####任务执行完成#####&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="附os库基本用法整理"><a class="markdownIt-Anchor" href="#附os库基本用法整理"></a> 附：OS库基本用法整理</h2><h2 id="附shutil库基本用法整理"><a class="markdownIt-Anchor" href="#附shutil库基本用法整理"></a> 附：shutil库基本用法整理</h2><h2 id="附zipfile库基本用法整理"><a class="markdownIt-Anchor" href="#附zipfile库基本用法整理"></a> 附：zipfile库基本用法整理</h2><p><font color="#dd0000">今天有点懒，回头再整理吧😂😂😂</font></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>OS</category>
      
      <category>shutil</category>
      
      <category>zipfile</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>OS</tag>
      
      <tag>shutil</tag>
      
      <tag>zipfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python|PyAutoGUI实现自动点赞收藏</title>
    <link href="/2022/08/14/Python%20PyAutoGUI/"/>
    <url>/2022/08/14/Python%20PyAutoGUI/</url>
    
    <content type="html"><![CDATA[<p>最近公司要求每月要在某APP中完成1000积分的积累，算下来每月要点赞+收藏文章三百多篇。像我这样积极的青年当然要想办法偷个懒~</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>该APP恰巧有网页版（没有网页版的话PC端估计还要搭建个安卓模拟器）。最开始尝试过通过<a href="https://pypi.org/project/requests/">requests库</a>获取未读文章并更新积分，不过尝试了很多浏览器的伪装依然失败了😂😂后来考虑通过<a href="https://pypi.org/project/PyAutoGUI/">PyAutoGUI库</a>实现模拟鼠标的操作。<br><br />PyAutoGUI是一个纯Python的GUI自动化库，可实现鼠标和键盘的操作。实现方式也很简单：打开目标网站，通过代码控制鼠标，打开未读的文章，并找到“点赞”和“收藏”的按钮坐标，完成点击+收藏操作后关闭该篇文章，之后更新未读文章后循环操作即可。</p><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><p>实操下来就用了十几行代码，实测了五六分钟完成了100篇文章的处理，轻轻松松完成两百多积分的获取。事了拂衣去，深藏功与名~<br></p><h3 id="源码如下"><a class="markdownIt-Anchor" href="#源码如下"></a> 源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auto_click</span>():<br>    pyautogui.click(<span class="hljs-number">1645</span>,<span class="hljs-number">774</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 收藏 Point(x=1645, y=774)</span><br>    pyautogui.click(<span class="hljs-number">1742</span>,<span class="hljs-number">772</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 点赞 Point(x=1742, y=772)</span><br>    pyautogui.click(<span class="hljs-number">1016</span>,<span class="hljs-number">29</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 关闭标签 Point(x=1016, y=29)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    time.sleep(<span class="hljs-number">5</span>) <span class="hljs-comment"># 手工打开待处理浏览器</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            pyautogui.click(<span class="hljs-number">1594</span>,<span class="hljs-number">447</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 时间优先 Point(x=1594, y=447)</span><br>            pyautogui.click(<span class="hljs-number">615</span>,<span class="hljs-number">578</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 打开第一篇文章 Point(x=615, y=578)</span><br>        <span class="hljs-keyword">else</span>:<br>            pyautogui.click(<span class="hljs-number">1751</span>,<span class="hljs-number">447</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 热度优先 Point(x=1751, y=447)</span><br>            pyautogui.click(<span class="hljs-number">615</span>,<span class="hljs-number">578</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 打开第一篇文章 Point(x=615, y=578)</span><br>        auto_click()  <br>        i+=<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;累计处理&#123;&#125;篇&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br></code></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>PyAutoGUI相比requests、urllib库可以用更少的代码量解决此问题，免去了反爬虫的处理，但实际使用时还是发现了一些小的问题：因为是依靠屏幕坐标系完成鼠标的操作，在点赞、收藏图标位置变化（虽然频次很低）时不能很好的处理。我尝试过pyautogui.locateCenterOnScreen()去定位点赞和收藏按钮的具体位置来完成每一篇精准无误的点赞+收藏，但因为识别成功率和识别效率也没有很高就放弃了。即便如此，PyAutoGUI依旧是神器，助我顺利划水，轻松完成月度积分目标😁😁😁</p><p>PyAutoGUI库的功能有点像我前几年使用过的按键精灵、UIPath机器人。类似PyAutoGUI的python库还有win32gui、pywinauto等，后续有机会了再研究下。不可否认的是，作为一种解释性语言，python毫无疑问是值得我深入学习和使用的。</p><h2 id="附pyautogui库基本用法整理"><a class="markdownIt-Anchor" href="#附pyautogui库基本用法整理"></a> 附：PyAutoGUI库基本用法整理</h2><h3 id="鼠标键盘提示框基本操作"><a class="markdownIt-Anchor" href="#鼠标键盘提示框基本操作"></a> 鼠标/键盘/提示框基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">####鼠标操作####</span><br>pyautogui.position() <span class="hljs-comment"># 获取当前鼠标的坐标</span><br>pyautogui.locateCenterOnScreen(<span class="hljs-string">r&#x27;C:/Users/admin/Desktop/sc.png&#x27;</span>) <span class="hljs-comment"># 根据图像获取当前界面含有该图像的中心坐标</span><br>pyautogui.click(<span class="hljs-number">1751</span>,<span class="hljs-number">447</span>,button=<span class="hljs-string">&#x27;left&#x27;</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 鼠标左单击。button的参数值有：left,righ,middle</span><br>pyautogui.doubleClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment"># 指定位置，双击左键</span><br>pyautogui.rightClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)   <span class="hljs-comment"># 指定位置，双击右键</span><br>pyautogui.middleClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment"># 指定位置，双击中键</span><br>pyautogui.mouseDown()   <span class="hljs-comment"># 鼠标按下</span><br>pyautogui.mouseUp()    <span class="hljs-comment"># 鼠标释放</span><br>pyautogui.dragTo(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,duration=<span class="hljs-number">1</span>)   <span class="hljs-comment"># 拖动到指定的位置</span><br>pyautogui.dragRel(<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,duration=<span class="hljs-number">4</span>)   <span class="hljs-comment"># 按方向拖动，第一个参数是左右移动像素值，第二个是上下</span><br>pyautogui.scroll(<span class="hljs-number">300</span>)  <span class="hljs-comment"># 向上滚动300个单位；</span><br>pyautogui.moveTo(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 移动鼠标到x,y的位置，移动时间1秒</span><br>pyautogui.moveRel(<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,duration=<span class="hljs-number">4</span>) <span class="hljs-comment"># 向右移动x，向下移动y，移动时间4秒</span><br><br><span class="hljs-comment">####界面操作####</span><br>im = pyautogui.screenshot() <span class="hljs-comment">#返回屏幕的截图，是一个Pillow的image对象</span><br>im.save(<span class="hljs-string">&#x27;屏幕截图.png&#x27;</span>) <span class="hljs-comment">#保存屏幕截图</span><br>im.getpixel((<span class="hljs-number">500</span>, <span class="hljs-number">500</span>)) <span class="hljs-comment">#返回im对象上，（500，500）这一点像素的颜色，是一个RGB元组</span><br>pyautogui.pixelMatchesColor(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>,(<span class="hljs-number">12</span>,<span class="hljs-number">120</span>,<span class="hljs-number">400</span>)) <span class="hljs-comment">#是一个对比函数，对比的是屏幕上（500，500）这一点像素的颜色，与所给的元素是否相同；</span><br><br><span class="hljs-comment">####键盘输入####</span><br>pyautogui.keyDown(<span class="hljs-string">&#x27;shift&#x27;</span>)    <span class="hljs-comment"># 按下shift</span><br>pyautogui.press(<span class="hljs-string">&#x27;4&#x27;</span>)    <span class="hljs-comment"># 按下 4</span><br>pyautogui.keyUp(<span class="hljs-string">&#x27;shift&#x27;</span>)   <span class="hljs-comment"># 释放 shift</span><br>pyautogui.typewrite(<span class="hljs-string">&#x27;this&#x27;</span>,<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 第一参数是输入内容，第二个参数是每个字符间的间隔时间；</span><br>pyautogui.typewrite([<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>]) <span class="hljs-comment">#typewrite 还可以传入单字母的列表；</span><br>pyautogui.typewrite([<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,])   <span class="hljs-comment"># 有时我们需要输入一些特殊的按键，比如向左的箭头，这些有相对应的键盘字符串表示，例如输出：This</span><br>pyautogui.hotkey(<span class="hljs-string">&#x27;ctrl&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment"># 快捷键</span><br><br><span class="hljs-comment">####提示信息框####</span><br>a = pyautogui.alert(text=<span class="hljs-string">&#x27;This is an alert box.&#x27;</span>, title=<span class="hljs-string">&#x27;Test&#x27;</span>) <span class="hljs-comment"># 提示框/警示框</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.confirm(<span class="hljs-string">&#x27;选择一项&#x27;</span>, buttons=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]) <span class="hljs-comment"># 选择框</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.password(<span class="hljs-string">&#x27;Enter password (text will be hidden)&#x27;</span>) <span class="hljs-comment"># 密码输入，返回值为刚刚输入的值</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.prompt(<span class="hljs-string">&#x27;请输入一个数字：&#x27;</span>) <span class="hljs-comment"># 普通输入，返回值为刚刚输入的值</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">####其他####</span><br>pyautogui.size() <span class="hljs-comment"># 获取屏幕分辨率</span><br><br><span class="hljs-comment">## 停顿功能。意味着所有pyautogui的指令都要暂停一秒；其他指令不会停顿；这样做，可以防止键盘鼠标操作太快；</span><br>pyautogui.PAUSE = <span class="hljs-number">1</span> <br><span class="hljs-comment">## 自动防故障，默认这项功能为True, 这项功能意味着：当鼠标的指针在屏幕的最坐上方，程序会报错；目的是为了防止程序无法停止；</span><br>pyautogui.FAILSAFE =<span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="识别图像"><a class="markdownIt-Anchor" href="#识别图像"></a> 识别图像</h3><p>首先，我们需要先获得一个屏幕快照，例如我们想要点赞，我们就先把大拇指的图片保存下来；然后使用函数：locateOnScreen(‘zan.png’) ，如果可以找到图片，则返回图片的位置，如：Box(left=25, top=703, width=22, height=22)；如果找不到图片，则返回None;<br />如果，屏幕上有多处图片可以匹配，则需要使用locateAllOnScreen(‘zan.png’) ，如果匹配到多个值，则返回一个list，参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui<br>pyautogui.PAUSE = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 图像识别（一个）</span><br>btm = pyautogui.locateOnScreen(<span class="hljs-string">&#x27;zan.png&#x27;</span>)<br><span class="hljs-built_in">print</span>(btm)  <span class="hljs-comment"># Box(left=1280, top=344, width=22, height=22)</span><br><br><span class="hljs-comment"># 图像识别（多个）</span><br>btm = pyautogui.locateAllOnScreen(<span class="hljs-string">&#x27;zan.png&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(btm)) <br></code></pre></td></tr></table></figure><p>pyautogui.center((left, top, width, height)) 返回指定位置的中心点；这样，我们就可以再配合鼠标操作点击找到图片的中心。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>GUI自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>PyAutoGui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kettle|自助巡检</title>
    <link href="/2022/04/25/Kettle-%E8%87%AA%E5%8A%A9%E5%B7%A1%E6%A3%80/"/>
    <url>/2022/04/25/Kettle-%E8%87%AA%E5%8A%A9%E5%B7%A1%E6%A3%80/</url>
    
    <content type="html"><![CDATA[<h2 id="想划水肯定有它的原因"><a class="markdownIt-Anchor" href="#想划水肯定有它的原因"></a> 想划水肯定有它的原因</h2><p>是的，我又想划水了~ 不知道什么时候开始，我负责的系统突然就多的一批。每天一大早要开浏览器检查B/S类的几个系统是否正常、要开客户端检查C/S类的几个系统是否正常、还要检查好几个系统的定时任务是否正常、还要检查七八台数据库的备份是不是正常。后来发现！！！我竟然还有一个LDAP的数据要及时检查更新（关于LDAP真的是又爱又恨，有空要展开说说）。前段时间每天早上忙活一阵已经二十分钟过去了~反正我又想偷懒了😵😵😵</p><h2 id="怎么突然想到了kettle"><a class="markdownIt-Anchor" href="#怎么突然想到了kettle"></a> 怎么突然想到了KETTLE</h2><p>ETL工具我平时工作其实是不怎么用得到的，感觉日常的使用需求用ETL工具太笨重了。想到用KETTLE也是没办法了，日常巡检涉及到数据库和网络的检查/处理，很少有一款工具可以一键搞定，而且自己写Shell或Python脚本的话也很有点麻烦。<br><br />Kettle是一款开源的ETL工具，纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。（这一句源于百度~ ）反正KETTL在数据处理上就是很灵活，基本支持常用的各类格式的数据接入、常见规则下的数据转换和加工、常见格式的数据输出，而且对Web服务的常见需求也可以搞定。简直万金油一样的工具~👍👍👍</p><h2 id="简单尝试了一下"><a class="markdownIt-Anchor" href="#简单尝试了一下"></a> 简单尝试了一下</h2><p>Kettle分为作业和转换模式，“作业”基本就等同于完整的流程化处理、“转换”常用于数据的处理和加工。<br><br />✔️公司日常人员变动需要去LDAP中进行物理删除相关信息：写个转换，查询出来内网门户中人员变动清单，然后去LDAP中查到后执行删除操作。<br><br />✔️公司通讯录名单（excel）定期更新到数据库中：写个转换，读取excel数据，然后去对应的数据库中执行更新操作。<br><br />✔️几个日常需要检查服务是否正常的系统：通过作业，检查Web服务是否正常<br><br />✔️几个日常需要检查定时任务是否正常的系统：通过作业，检查数据库是否正常<br><br />现在每天早上点开执行以下，然后只需要检查下数据库备份就完事了~（数据库巡检的事我早晚也要搞一下😂😂😂）<br /><img src="https://s2.loli.net/2022/08/17/IXgUKAqOFnzcGV9.png" alt="LDAP离职人员处理" /><br /><img src="https://s2.loli.net/2022/08/17/U1PW689arvsJFOH.png" alt="员工电话号码更新" /><br /><img src="https://s2.loli.net/2022/08/17/U6XLeYaOcW7bpEi.png" alt="kettle日常巡检执行" /></p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>用Kettle来做日常巡检感觉有点大材小用了，但借此机会又了解一个新的工具还是很满意的。总体看来Kettle还是很容易上手的，图形化界面也相对友好，操作也很简单。本着虚心学习的心态我在B站上找了操作教程，但根本没坚持看完😂😂😂UP主讲的很好，主要是Kettle太容易上手了。<br><br />B站链接：<a href="https://b23.tv/P65jHuI">2019kettle8.2最新教程-哔哩哔哩</a></p>]]></content>
    
    
    <categories>
      
      <category>Kettle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kettle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel|合并当前目录所有的excel文件</title>
    <link href="/2019/08/29/VBA-%E5%90%88%E5%B9%B6excel%E6%96%87%E4%BB%B6/"/>
    <url>/2019/08/29/VBA-%E5%90%88%E5%B9%B6excel%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="功能描述"><a class="markdownIt-Anchor" href="#功能描述"></a> 功能描述</h2><p>前几年做项目时有次项目组整理客户的物料编码，涉及上万条数据的整理。十几个人分工整理后还需要合并到一个excel做进一步处理。逐个粘贴到一个表中不仅费时间还容易出错，后来百度了一个方法：通过VBA合并当前文件夹下所有工作簿的全部工作表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs VBA">Sub 合并当前目录下所有工作簿的全部工作表()<br>Dim MyPath, MyName, AWbName<br>Dim Wb As Workbook, WbN As String<br>Dim G As Long<br>Dim Num As Long<br>Dim BOX As String<br>Application.ScreenUpdating = False<br>MyPath = ActiveWorkbook.Path<br>MyName = Dir(MyPath &amp; &quot;\&quot; &amp; &quot;*.xls&quot;)<br>AWbName = ActiveWorkbook.Name<br>Num = 0<br>Do While MyName &lt;&gt; &quot;&quot;<br>If MyName &lt;&gt; AWbName Then<br>Set Wb = Workbooks.Open(MyPath &amp; &quot;\&quot; &amp; MyName)<br>Num = Num + 1<br>With Workbooks(1).ActiveSheet<br>.Cells(.Range(&quot;B65536&quot;).End(xlUp).Row + 2, 1) = Left(MyName, Len(MyName) - 4)<br>For G = 1 To Sheets.Count<br>Wb.Sheets(G).UsedRange.Copy .Cells(.Range(&quot;B65536&quot;).End(xlUp).Row + 1, 1)<br>Next<br>WbN = WbN &amp; Chr(13) &amp; Wb.Name<br>Wb.Close False<br>End With<br>End If<br>MyName = Dir<br>Loop<br>Range(&quot;B1&quot;).Select<br>Application.ScreenUpdating = True<br>MsgBox &quot;共合并了&quot; &amp; Num &amp; &quot;个工作薄下的全部工作表。如下：&quot; &amp; Chr(13) &amp; WbN, vbInformation, &quot;提示&quot;<br>End Sub<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Excel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VBA</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
