<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python|OS实现批量扫描复制文件</title>
    <link href="/2022/08/15/Python%20os%20%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/2022/08/15/Python%20os%20%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>每天一划水，无事小神仙。<br><br>今天有个需求：服务器上有个文件夹，里面按日期生成了文件夹。工作日所在的文件夹内有需要我复制下来的文件。要求每个月取一次。<br><br>每月要翻三十个文件夹，找二十多个文件，让我手工复制是绝不可能的！🙂🙂🙂那必须要搞个脚本自己跑。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、服务器磁盘已映射（本地可直接访问）。<br><br>2、确定要批量扫描的文件夹名称（按日期命名的文件夹）。<br><br>3、根据要扫描的日期，按文件夹名进行遍历，找到要复制的文件。<br><br>4、在桌面创建一个文件夹，把找到的文件复制进去。<br></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h3><p>要扫描的文件夹，不敢想象让我手工去复制要搞到什么时候~<br><img src="https://s2.loli.net/2022/08/15/LB2IrOTtkRqbmMN.png" alt="目标文件夹"><br>代码批量执行还是很快的，输入要执行的区间即可。<br><img src="https://s2.loli.net/2022/08/15/Uwz6fT5xXNYyAtH.png" alt="执行日志"><br>执行结果完全符合预期😁😁😁<br><img src="https://s2.loli.net/2022/08/15/3AG1UhmXs96qiod.png" alt="执行结果"></p><h3 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-comment"># from datetime import datetime</span><br><br><span class="hljs-comment"># 桌面创建文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md</span>(<span class="hljs-params">tp=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;C:\\Users\\admin\\Desktop\\&#x27;</span>+tp):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        os.makedirs(<span class="hljs-string">r&#x27;C:\\Users\\admin\\Desktop\\&#x27;</span>+tp)<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-comment"># 读取文件夹</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rd</span>(<span class="hljs-params">begindate,enddate</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(begindate),<span class="hljs-built_in">int</span>(enddate)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)):<br>            <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">r&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;\\PAR_YIELDCURVE_ALL&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;.dbf&#x27;</span>):<br>                shutil.copy(<span class="hljs-string">&#x27;Z:\\gildata\\FileSync\\Download\\gz\\&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;\\PAR_YIELDCURVE_ALL&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;.dbf&#x27;</span>,<span class="hljs-string">&#x27;C:\\Users\\admin\\Desktop\\收益率曲线&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无&#123;&#125;日的收益率曲线&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无&#123;&#125;日的聚源数据文件夹&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 输入起止日期</span><br>    <span class="hljs-comment"># enddate = datetime.today().date().strftime(r&#x27;%Y%m%d&#x27;)</span><br>    <span class="hljs-comment"># begindate = datetime.today().date().replace(day=1).strftime(r&#x27;%Y%m%d&#x27;)</span><br>    begindate = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入开始日期（格式：20220801）:&#x27;</span>)<br>    enddate =  <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入结束日期（格式：20220831）:&#x27;</span>)<br>    <span class="hljs-comment"># 检查文件夹</span><br>    md(<span class="hljs-string">&quot;收益率曲线&quot;</span>)<br>    <span class="hljs-comment"># 遍历文件夹</span><br>    rd(begindate,enddate)<br></code></pre></td></tr></table></figure><h2 id="附：OS库基本用法整理"><a href="#附：OS库基本用法整理" class="headerlink" title="附：OS库基本用法整理"></a>附：OS库基本用法整理</h2><p><font color="#dd0000">今天有点懒，回头再整理吧😂😂😂</font></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python|PyAutoGUI实现自动点赞收藏</title>
    <link href="/2022/08/14/Python%20PyAutoGUI/"/>
    <url>/2022/08/14/Python%20PyAutoGUI/</url>
    
    <content type="html"><![CDATA[<p>最近公司要求每月要在某APP中完成1000积分的积累，算下来每月要点赞+收藏文章三百多篇。像我这样积极的青年当然要想办法偷个懒~</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>该APP恰巧有网页版（没有网页版的话PC端估计还要搭建个安卓模拟器）。最开始尝试过通过<a href="https://pypi.org/project/requests/">requests库</a>获取未读文章并更新积分，不过尝试了很多浏览器的伪装依然失败了😂😂后来考虑通过<a href="https://pypi.org/project/PyAutoGUI/">PyAutoGUI库</a>实现模拟鼠标的操作。<br><br>PyAutoGUI是一个纯Python的GUI自动化库，可实现鼠标和键盘的操作。实现方式也很简单：打开目标网站，通过代码控制鼠标，打开未读的文章，并找到“点赞”和“收藏”的按钮坐标，完成点击+收藏操作后关闭该篇文章，之后更新未读文章后循环操作即可。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>实操下来就用了十几行代码，实测了五六分钟完成了100篇文章的处理，轻轻松松完成两百多积分的获取。事了拂衣去，深藏功与名~<br></p><h3 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">auto_click</span>():<br>    pyautogui.click(<span class="hljs-number">1645</span>,<span class="hljs-number">774</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 收藏 Point(x=1645, y=774)</span><br>    pyautogui.click(<span class="hljs-number">1742</span>,<span class="hljs-number">772</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 点赞 Point(x=1742, y=772)</span><br>    pyautogui.click(<span class="hljs-number">1016</span>,<span class="hljs-number">29</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 关闭标签 Point(x=1016, y=29)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    time.sleep(<span class="hljs-number">5</span>) <span class="hljs-comment"># 手工打开待处理浏览器</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            pyautogui.click(<span class="hljs-number">1594</span>,<span class="hljs-number">447</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 时间优先 Point(x=1594, y=447)</span><br>            pyautogui.click(<span class="hljs-number">615</span>,<span class="hljs-number">578</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 打开第一篇文章 Point(x=615, y=578)</span><br>        <span class="hljs-keyword">else</span>:<br>            pyautogui.click(<span class="hljs-number">1751</span>,<span class="hljs-number">447</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 热度优先 Point(x=1751, y=447)</span><br>            pyautogui.click(<span class="hljs-number">615</span>,<span class="hljs-number">578</span>,duration=<span class="hljs-number">0.6</span>) <span class="hljs-comment"># 打开第一篇文章 Point(x=615, y=578)</span><br>        auto_click()  <br>        i+=<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;累计处理&#123;&#125;篇&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PyAutoGUI相比requests、urllib库可以用更少的代码量解决此问题，免去了反爬虫的处理，但实际使用时还是发现了一些小的问题：因为是依靠屏幕坐标系完成鼠标的操作，在点赞、收藏图标位置变化（虽然频次很低）时不能很好的处理。我尝试过pyautogui.locateCenterOnScreen()去定位点赞和收藏按钮的具体位置来完成每一篇精准无误的点赞+收藏，但因为识别成功率和识别效率也没有很高就放弃了。即便如此，PyAutoGUI依旧是神器，助我顺利划水，轻松完成月度积分目标😁😁😁</p><p>PyAutoGUI库的功能有点像我前几年使用过的按键精灵、UIPath机器人。类似PyAutoGUI的python库还有win32gui、pywinauto等，后续有机会了再研究下。不可否认的是，作为一种解释性语言，python毫无疑问是值得我深入学习和使用的。</p><h2 id="附：PyAutoGUI库基本用法整理"><a href="#附：PyAutoGUI库基本用法整理" class="headerlink" title="附：PyAutoGUI库基本用法整理"></a>附：PyAutoGUI库基本用法整理</h2><h3 id="鼠标-x2F-键盘-x2F-提示框基本操作"><a href="#鼠标-x2F-键盘-x2F-提示框基本操作" class="headerlink" title="鼠标&#x2F;键盘&#x2F;提示框基本操作"></a>鼠标&#x2F;键盘&#x2F;提示框基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">####鼠标操作####</span><br>pyautogui.position() <span class="hljs-comment"># 获取当前鼠标的坐标</span><br>pyautogui.locateCenterOnScreen(<span class="hljs-string">r&#x27;C:/Users/admin/Desktop/sc.png&#x27;</span>) <span class="hljs-comment"># 根据图像获取当前界面含有该图像的中心坐标</span><br>pyautogui.click(<span class="hljs-number">1751</span>,<span class="hljs-number">447</span>,button=<span class="hljs-string">&#x27;left&#x27;</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 鼠标左单击。button的参数值有：left,righ,middle</span><br>pyautogui.doubleClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment"># 指定位置，双击左键</span><br>pyautogui.rightClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)   <span class="hljs-comment"># 指定位置，双击右键</span><br>pyautogui.middleClick(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment"># 指定位置，双击中键</span><br>pyautogui.mouseDown()   <span class="hljs-comment"># 鼠标按下</span><br>pyautogui.mouseUp()    <span class="hljs-comment"># 鼠标释放</span><br>pyautogui.dragTo(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,duration=<span class="hljs-number">1</span>)   <span class="hljs-comment"># 拖动到指定的位置</span><br>pyautogui.dragRel(<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,duration=<span class="hljs-number">4</span>)   <span class="hljs-comment"># 按方向拖动，第一个参数是左右移动像素值，第二个是上下</span><br>pyautogui.scroll(<span class="hljs-number">300</span>)  <span class="hljs-comment"># 向上滚动300个单位；</span><br>pyautogui.moveTo(<span class="hljs-number">100</span>,<span class="hljs-number">300</span>,duration=<span class="hljs-number">1</span>) <span class="hljs-comment"># 移动鼠标到x,y的位置，移动时间1秒</span><br>pyautogui.moveRel(<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,duration=<span class="hljs-number">4</span>) <span class="hljs-comment"># 向右移动x，向下移动y，移动时间4秒</span><br><br><span class="hljs-comment">####界面操作####</span><br>im = pyautogui.screenshot() <span class="hljs-comment">#返回屏幕的截图，是一个Pillow的image对象</span><br>im.save(<span class="hljs-string">&#x27;屏幕截图.png&#x27;</span>) <span class="hljs-comment">#保存屏幕截图</span><br>im.getpixel((<span class="hljs-number">500</span>, <span class="hljs-number">500</span>)) <span class="hljs-comment">#返回im对象上，（500，500）这一点像素的颜色，是一个RGB元组</span><br>pyautogui.pixelMatchesColor(<span class="hljs-number">500</span>,<span class="hljs-number">500</span>,(<span class="hljs-number">12</span>,<span class="hljs-number">120</span>,<span class="hljs-number">400</span>)) <span class="hljs-comment">#是一个对比函数，对比的是屏幕上（500，500）这一点像素的颜色，与所给的元素是否相同；</span><br><br><span class="hljs-comment">####键盘输入####</span><br>pyautogui.keyDown(<span class="hljs-string">&#x27;shift&#x27;</span>)    <span class="hljs-comment"># 按下shift</span><br>pyautogui.press(<span class="hljs-string">&#x27;4&#x27;</span>)    <span class="hljs-comment"># 按下 4</span><br>pyautogui.keyUp(<span class="hljs-string">&#x27;shift&#x27;</span>)   <span class="hljs-comment"># 释放 shift</span><br>pyautogui.typewrite(<span class="hljs-string">&#x27;this&#x27;</span>,<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 第一参数是输入内容，第二个参数是每个字符间的间隔时间；</span><br>pyautogui.typewrite([<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>]) <span class="hljs-comment">#typewrite 还可以传入单字母的列表；</span><br>pyautogui.typewrite([<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,])   <span class="hljs-comment"># 有时我们需要输入一些特殊的按键，比如向左的箭头，这些有相对应的键盘字符串表示，例如输出：This</span><br>pyautogui.hotkey(<span class="hljs-string">&#x27;ctrl&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>) <span class="hljs-comment"># 快捷键</span><br><br><span class="hljs-comment">####提示信息框####</span><br>a = pyautogui.alert(text=<span class="hljs-string">&#x27;This is an alert box.&#x27;</span>, title=<span class="hljs-string">&#x27;Test&#x27;</span>) <span class="hljs-comment"># 提示框/警示框</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.confirm(<span class="hljs-string">&#x27;选择一项&#x27;</span>, buttons=[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]) <span class="hljs-comment"># 选择框</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.password(<span class="hljs-string">&#x27;Enter password (text will be hidden)&#x27;</span>) <span class="hljs-comment"># 密码输入，返回值为刚刚输入的值</span><br><span class="hljs-built_in">print</span>(a)<br>a = pyautogui.prompt(<span class="hljs-string">&#x27;请输入一个数字：&#x27;</span>) <span class="hljs-comment"># 普通输入，返回值为刚刚输入的值</span><br><span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">####其他####</span><br>pyautogui.size() <span class="hljs-comment"># 获取屏幕分辨率</span><br><br><span class="hljs-comment">## 停顿功能。意味着所有pyautogui的指令都要暂停一秒；其他指令不会停顿；这样做，可以防止键盘鼠标操作太快；</span><br>pyautogui.PAUSE = <span class="hljs-number">1</span> <br><span class="hljs-comment">## 自动防故障，默认这项功能为True, 这项功能意味着：当鼠标的指针在屏幕的最坐上方，程序会报错；目的是为了防止程序无法停止；</span><br>pyautogui.FAILSAFE =<span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="识别图像"><a href="#识别图像" class="headerlink" title="识别图像"></a>识别图像</h3><p>首先，我们需要先获得一个屏幕快照，例如我们想要点赞，我们就先把大拇指的图片保存下来；然后使用函数：locateOnScreen(‘zan.png’) ，如果可以找到图片，则返回图片的位置，如：Box(left&#x3D;25, top&#x3D;703, width&#x3D;22, height&#x3D;22)；如果找不到图片，则返回None;<br>如果，屏幕上有多处图片可以匹配，则需要使用locateAllOnScreen(‘zan.png’) ，如果匹配到多个值，则返回一个list，参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui<br>pyautogui.PAUSE = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 图像识别（一个）</span><br>btm = pyautogui.locateOnScreen(<span class="hljs-string">&#x27;zan.png&#x27;</span>)<br><span class="hljs-built_in">print</span>(btm)  <span class="hljs-comment"># Box(left=1280, top=344, width=22, height=22)</span><br><br><span class="hljs-comment"># 图像识别（多个）</span><br>btm = pyautogui.locateAllOnScreen(<span class="hljs-string">&#x27;zan.png&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(btm)) <br></code></pre></td></tr></table></figure><p>pyautogui.center((left, top, width, height)) 返回指定位置的中心点；这样，我们就可以再配合鼠标操作点击找到图片的中心。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>GUI自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>自动化</tag>
      
      <tag>PyAutoGui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kettle|自助巡检</title>
    <link href="/2022/04/25/Kettle-%E8%87%AA%E5%8A%A9%E5%B7%A1%E6%A3%80/"/>
    <url>/2022/04/25/Kettle-%E8%87%AA%E5%8A%A9%E5%B7%A1%E6%A3%80/</url>
    
    <content type="html"><![CDATA[<h2 id="想划水肯定有它的原因"><a href="#想划水肯定有它的原因" class="headerlink" title="想划水肯定有它的原因"></a>想划水肯定有它的原因</h2><p>是的，我又想划水了~ 不知道什么时候开始，我负责的系统突然就多的一批。每天一大早要开浏览器检查B&#x2F;S类的几个系统是否正常、要开客户端检查C&#x2F;S类的几个系统是否正常、还要检查好几个系统的定时任务是否正常、还要检查七八台数据库的备份是不是正常。后来发现！！！我竟然还有一个LDAP的数据要及时检查更新（关于LDAP真的是又爱又恨，有空要展开说说）。前段时间每天早上忙活一阵已经二十分钟过去了~反正我又想偷懒了😵😵😵</p><h2 id="怎么突然想到了KETTLE"><a href="#怎么突然想到了KETTLE" class="headerlink" title="怎么突然想到了KETTLE"></a>怎么突然想到了KETTLE</h2><p>ETL工具我平时工作其实是不怎么用得到的，感觉日常的使用需求用ETL工具太笨重了。想到用KETTLE也是没办法了，日常巡检涉及到数据库和网络的检查&#x2F;处理，很少有一款工具可以一键搞定，而且自己写Shell或Python脚本的话也很有点麻烦。<br><br>Kettle是一款开源的ETL工具，纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。（这一句源于百度~ ）反正KETTL在数据处理上就是很灵活，基本支持常用的各类格式的数据接入、常见规则下的数据转换和加工、常见格式的数据输出，而且对Web服务的常见需求也可以搞定。简直万金油一样的工具~👍👍👍</p><h2 id="简单尝试了一下"><a href="#简单尝试了一下" class="headerlink" title="简单尝试了一下"></a>简单尝试了一下</h2><p>Kettle分为作业和转换模式，“作业”基本就等同于完整的流程化处理、“转换”常用于数据的处理和加工。<br><br>✔️公司日常人员变动需要去LDAP中进行物理删除相关信息：写个转换，查询出来内网门户中人员变动清单，然后去LDAP中查到后执行删除操作。<br><br>✔️公司通讯录名单（excel）定期更新到数据库中：写个转换，读取excel数据，然后去对应的数据库中执行更新操作。<br><br>✔️几个日常需要检查服务是否正常的系统：通过作业，检查Web服务是否正常<br><br>✔️几个日常需要检查定时任务是否正常的系统：通过作业，检查数据库是否正常<br><br>现在每天早上点开执行以下，然后只需要检查下数据库备份就完事了~（数据库巡检的事我早晚也要搞一下😂😂😂）<br><img src="https://s2.loli.net/2022/08/17/IXgUKAqOFnzcGV9.png" alt="LDAP离职人员处理"><br><img src="https://s2.loli.net/2022/08/17/U1PW689arvsJFOH.png" alt="员工电话号码更新"><br><img src="https://s2.loli.net/2022/08/17/U6XLeYaOcW7bpEi.png" alt="kettle日常巡检执行"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>用Kettle来做日常巡检感觉有点大材小用了，但借此机会又了解一个新的工具还是很满意的。总体看来Kettle还是很容易上手的，图形化界面也相对友好，操作也很简单。本着虚心学习的心态我在B站上找了操作教程，但根本没坚持看完😂😂😂UP主讲的很好，主要是Kettle太容易上手了。<br><br>B站链接：<a href="https://b23.tv/P65jHuI">2019kettle8.2最新教程-哔哩哔哩</a></p>]]></content>
    
    
    <categories>
      
      <category>Kettle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kettle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VBA|合并当前目录所有的excel文件</title>
    <link href="/2019/08/29/VBA-%E5%90%88%E5%B9%B6excel%E6%96%87%E4%BB%B6/"/>
    <url>/2019/08/29/VBA-%E5%90%88%E5%B9%B6excel%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><p>前几年做项目时有次项目组整理客户的物料编码，涉及上万条数据的整理。十几个人分工整理后还需要合并到一个excel做进一步处理。逐个粘贴到一个表中不仅费时间还容易出错，后来百度了一个方法：通过VBA合并当前文件夹下所有工作簿的全部工作表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs VBA">Sub 合并当前目录下所有工作簿的全部工作表()<br>Dim MyPath, MyName, AWbName<br>Dim Wb As Workbook, WbN As String<br>Dim G As Long<br>Dim Num As Long<br>Dim BOX As String<br>Application.ScreenUpdating = False<br>MyPath = ActiveWorkbook.Path<br>MyName = Dir(MyPath &amp; &quot;\&quot; &amp; &quot;*.xls&quot;)<br>AWbName = ActiveWorkbook.Name<br>Num = 0<br>Do While MyName &lt;&gt; &quot;&quot;<br>If MyName &lt;&gt; AWbName Then<br>Set Wb = Workbooks.Open(MyPath &amp; &quot;\&quot; &amp; MyName)<br>Num = Num + 1<br>With Workbooks(1).ActiveSheet<br>.Cells(.Range(&quot;B65536&quot;).End(xlUp).Row + 2, 1) = Left(MyName, Len(MyName) - 4)<br>For G = 1 To Sheets.Count<br>Wb.Sheets(G).UsedRange.Copy .Cells(.Range(&quot;B65536&quot;).End(xlUp).Row + 1, 1)<br>Next<br>WbN = WbN &amp; Chr(13) &amp; Wb.Name<br>Wb.Close False<br>End With<br>End If<br>MyName = Dir<br>Loop<br>Range(&quot;B1&quot;).Select<br>Application.ScreenUpdating = True<br>MsgBox &quot;共合并了&quot; &amp; Num &amp; &quot;个工作薄下的全部工作表。如下：&quot; &amp; Chr(13) &amp; WbN, vbInformation, &quot;提示&quot;<br>End Sub<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VBA</category>
      
      <category>小功能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VBA</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
